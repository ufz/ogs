/**
* \copyright
* Copyright (c) 2012-2025, OpenGeoSys Community (http://www.opengeosys.org)
*            Distributed under a Modified BSD License.
*              See accompanying file LICENSE.txt or
*              http://www.opengeosys.org/project/license
*
*/

#include "CreateTwoPhaseComponentialFlowProcess.h"
#include <cassert>

#include "MaterialLib/MPL/CreateMaterialSpatialDistributionMap.h"
#include "MaterialLib/MPL/MaterialSpatialDistributionMap.h"

#include <functional>
#include "ParameterLib/Utils.h"
#include "MeshToolsLib/MeshGenerators/MeshGenerator.h"  
#include "ProcessLib/Output/CreateSecondaryVariables.h"
#include "ParameterLib/ConstantParameter.h"
#include "ProcessLib/Utils/ProcessUtils.h"

#include "TwoPhaseComponentialFlowProcess.h"
#include "TwoPhaseComponentialFlowProcessData.h"
#include "MeshLib/PropertyVector.h"
#include "MaterialLib/PhysicalConstant.h"
#include "MaterialLib/MPL/Medium.h"

double const R = MaterialLib::PhysicalConstant::IdealGasConstant;


namespace ProcessLib
{
    namespace TwoPhaseComponentialFlow
    {
        std::unique_ptr<Process> createTwoPhaseComponentialFlowProcess(
            std::string name,
            MeshLib::Mesh& mesh,
            std::unique_ptr<ProcessLib::AbstractJacobianAssembler>&& jacobian_assembler,
            std::vector<ProcessVariable> const& variables,
            std::vector<std::unique_ptr<ParameterLib::ParameterBase>> const& parameters,
            unsigned const integration_order,
            BaseLib::ConfigTree const& config,
            std::map<int,
            std::shared_ptr<MaterialPropertyLib::Medium>>
            const& media)        
        {
            //! \ogs_file_param{prj__processes__process__type}
            config.checkConfigParameter("type", "TWOPHASE_COMPONENTIAL_FLOW");

            DBUG("Create TwoPhaseComponentialFlow Process Model.");
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__process_variables}
            auto const pv_config = config.getConfigSubtree("process_variables");

            auto per_process_variables = findProcessVariables(
                variables, pv_config,
                {//! \ogs_file_param_special{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__process_variables__gas_pressure}
                    "gas_pressure",
                    //! \ogs_file_param_special{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__process_variables__molar_fraction_gas_h2}
                    "molar_fraction_gas_h2",
                    //! \ogs_file_param_special{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__process_variables__molar_fraction_gas_ch4}
                    "molar_fraction_gas_ch4",
                    //! \ogs_file_param_special{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__process_variables__molar_fraction_gas_co2}
                    "molar_fraction_gas_co2",
                    //! \ogs_file_param_special{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__process_variables__capillary_pressure}
                    "capillary_pressure" });

            std::vector<std::vector<std::reference_wrapper<ProcessVariable>>>
                process_variables;
            process_variables.push_back(std::move(per_process_variables));

            SecondaryVariableCollection secondary_variables;

            ProcessLib::createSecondaryVariables(config, secondary_variables);
            // Specific body force
            std::vector<double> const b =
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__specific_body_force}
                config.getConfigParameter<std::vector<double>>("specific_body_force");
            assert(b.size() > 0 && b.size() < 4);
            Eigen::VectorXd specific_body_force(b.size());
            bool const has_gravity = MathLib::toVector(b).norm() > 0;
            if (has_gravity)
                std::copy_n(b.data(), b.size(), specific_body_force.data());

            
            auto const mass_lumping = 
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__mass_lumping}
            config.getConfigParameter<bool>("mass_lumping");

            // switch for cement reactions
                    
            auto const cement_chem =
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__cement_chem}
                config.getConfigParameter<bool>("cement_chem");
            auto const calc_flux_and_element_output =
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__calc_flux_and_element_output}
                config.getConfigParameter<bool>("calc_flux_and_element_output");   
            auto const h2o_in_gas =
            // Note: trailing whitespace in the next line. That shouldn't break OGS's documentation scripts.
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__h2o_in_gas} 
                config.getConfigParameter<bool>("h2o_in_gas");

            // diffusion coeff
            auto& diff_coeff_liquid = ParameterLib::findParameter<double>(
                config,
                  "diffusion_coeff_liquid", parameters, 1, &mesh);
            auto& diff_coeff_gas = ParameterLib::findParameter<double>(
                config,
                   "diffusion_coeff_gas", parameters, 1, &mesh);
            auto& diff_coeff_gas_co2 = ParameterLib::findParameter<double>(
                config,
                "diffusion_coeff_gas_co2", parameters, 1, &mesh);

            double const T_ref =
            //! \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__reference_temperature}
                config.getConfigParameter<double>(
                    "reference_temperature");

            double const Hen_h2 =
            // Note: double whitespace before \ogs_file_param in the next line. That shouldn't break OGS's documentation scripts.
            //!  \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__henry_coeff_h2}
                config.getConfigParameter<double>("henry_coeff_h2");

            double const Hen_co2 =
            // Note: no whitespace before \ogs_file_param in the next line. That shouldn't break OGS's documentation scripts.
            //!\ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__henry_coeff_co2}
                config.getConfigParameter<double>("henry_coeff_co2");

            double const Hen_ch4 =
            // Note: double whitespace before \ogs_file_param in the next line. That shouldn't break OGS's documentation scripts.
            //!  \ogs_file_param{prj__processes__process__TWOPHASE_COMPONENTIAL_FLOW__henry_coeff_ch4}
                config.getConfigParameter<double>("henry_coeff_ch4");

            // approximate Clausius-Clapeyron equation for low T
            double const pG_sat_h2o =
                 101325.0 * exp(((1.0 / 373.15) - (1.0 / T_ref)) *
                                0.018016 * 2258000.0 / R);

            // Henry's Law Constants
            // https://henrys-law.org/henry/casrn/1333-74-0
            // H_v_px [Pa]
            // H_v_px_ref = 5.534189e4 / H_s_cp_ref) 
            // dlnH_v_px/d(1/T) = - dlnH_s_cp/d(1/T)

            // Hen_com(T_ref) = H_v_px_ref2 * exp( (dlnH_v_px/d(1/T)) * (1 / T_ref - 1 / T_ref2))

            // double const Hen_h2 = 0;
            // H2: Gordon et al. (1977)
            // if (Henry_coeff_h2 > 0)
                // {
                //     double const Hen_h2 = Henry_coeff_h2;
                //}
            // else
                // {
            //    double const Hen_h2 =
            //        7.234e+9 * exp(-500 * (1 / T_ref - 1 / 298.15));
            //}

            // double const Hen_h2 = 5.534189e4 / 7.65e-6;  // MoMas
            // 
            // CH4: Burkholder et al. (2019)
            //double const Hen_ch4 = 3.95e+9 * exp(-1600 * (1 / T_ref - 1 / 298.15));

            // CO2: Burkholder et al. (2019)
            //double const Hen_co2 = 0.163e+9 * exp(-2300 * (1 / T_ref - 1 / 298.15));

            // N2: Burkholder et al. (2019)
            double const Hen_n2 = 8.65e+9 * exp(-1300 * (1 / T_ref - 1 / 298.15));

            auto const material_ids = MeshLib::materialIDs(mesh);
          
            auto media_map =
                MaterialPropertyLib::createMaterialSpatialDistributionMap(media,
                                                                          mesh);   
            TwoPhaseComponentialFlowProcessData process_data{
                specific_body_force,
                has_gravity,
                mass_lumping,
                cement_chem, 
                calc_flux_and_element_output,
                h2o_in_gas,
                diff_coeff_liquid,
                diff_coeff_gas,
                diff_coeff_gas_co2,
                T_ref,  
                pG_sat_h2o,
                Hen_h2,
                Hen_ch4,
                Hen_co2,
                Hen_n2,
                material_ids,
                std::move(media_map) };
            
            return std::unique_ptr<Process>{new TwoPhaseComponentialFlowProcess{
                std::move(name), mesh, std::move(jacobian_assembler),
                parameters, integration_order, std::move(process_variables),
                std::move(process_data), std::move(secondary_variables)}};  
        }

    }  // end of namespace
}  // end of namespace
