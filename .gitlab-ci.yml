spec:
  inputs:
    pipeline_type:
      default: ''
      options: ["", "regular", "web", "web-fast", "linux", "mac", "win", "guix", "wheels", "notebooks"]
    ogstools:
      default: ''
    ctest_args:
      default: ''
    build_ctest_large:
      default: "$BUILD_CTEST_LARGE"
---

stages:
  - preparation
  - build
  - test
  - check
  - release
  - package

variables:
  # Build config
  BUILD_TYPE: Release
  BUILD_TESTS: "true"
  BUILD_CTEST: "true"
  CTEST_ARGS: "" # If not empty supply arguments to select tests
  CTEST_TIMEOUT: "" # in minutes
  ARTIFACTS_PAGES_URL: https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts
  PIPELINE_NAME: "Default pipeline name"
  # by default skip performance tests, they can be enabled on isolated test machines
  OGS_PERFORMANCE_TESTS_ALLOWED_TO_FAIL: true

workflow:
  name: "$PIPELINE_NAME"
  rules:
    # Disable CI for non-MR user-scoped pipelines
    - if: $CI_PIPELINE_SOURCE == "pipeline"
    - if: '$CI_MERGE_REQUEST_IID == null && $CI_PROJECT_PATH != "ogs/ogs"'
      when: never
    - if: "$CI_MERGE_REQUEST_LABELS =~ /.*(workflow::paused|ci::skip).*/"
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::web only.*/
      variables:
        PIPELINE_NAME: "web only MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
        BUILD_TESTS: "false"
        CTEST_INCLUDE_REGEX: "nb-"
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::linux only.*/
      variables:
        PIPELINE_NAME: "linux only MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::mac only.*/
      variables:
        PIPELINE_NAME: "mac only MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::win only.*/
      variables:
        PIPELINE_NAME: "win only MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::guix only.*/
      variables:
        PIPELINE_NAME: "guix only MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::gui only.*/
      variables:
        PIPELINE_NAME: "gui only MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if: $CI_MERGE_REQUEST_IID # merge requests
      variables:
        PIPELINE_NAME: "MR pipeline: $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    - if: $CI_COMMIT_TAG # tags, ogs/ogs repo only
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_PATH == "ogs/ogs"' # master, ogs/ogs repo only
      variables:
        PIPELINE_NAME: "master pipeline"

include:
  - local: "scripts/ci/extends/*.yml"
  - local: "/scripts/ci/jobs/meta.yml"
  - local: "/scripts/ci/pipelines/regular.yml"
    rules:
      - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_MERGE_REQUEST_LABELS !~ /.*ci::\w* only.*/ && $CI_PIPELINE_SOURCE != "pipeline"
      - if: '"$[[ inputs.pipeline_type ]]" == "regular" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/web.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::web only?($|,)/
      - if: '"$[[ inputs.pipeline_type ]]" == "web" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/web-fast.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::web only \(fast.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "web-fast" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/scheduled.yml"
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
  - local: "/scripts/ci/pipelines/linux.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::linux only.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "linux" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/mac.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::mac only.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "mac" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/win.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::win only.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "win" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/guix.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::guix only.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "guix" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/pipelines/gui.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::gui only.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "gui" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/jobs/build-wheels.yml"
    rules:
      - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::wheels only.*/
      - if: '"$[[ inputs.pipeline_type ]]" == "wheels" && $CI_PIPELINE_SOURCE == "pipeline"'
  - local: "/scripts/ci/jobs/build-linux-arch.yml"
    rules:
      - if: '"$[[ inputs.pipeline_type ]]" == "notebooks" && $CI_PIPELINE_SOURCE == "pipeline"'
