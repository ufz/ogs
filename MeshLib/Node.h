/**
 * \file
 * \author Karsten Rink
 * \date   2012-05-02
 * \brief  Definition of the Node class.
 *
 * \copyright
 * Copyright (c) 2012-2020, OpenGeoSys Community (http://www.opengeosys.org)
 *            Distributed under a Modified BSD License.
 *              See accompanying file LICENSE.txt or
 *              http://www.opengeosys.org/project/license
 *
 */

#pragma once

#include <cstdlib>
#include <limits>
#include <vector>

#include "MathLib/Point3dWithID.h"
#include "MathLib/Vector3.h"

namespace ApplicationUtils
{
    class NodeWiseMeshPartitioner;
}

namespace MeshLib {

class Element;

/**
 * A mesh node with coordinates in 3D space.
 */
class Node : public MathLib::Point3dWithID
{
    /* friend classes: */
    friend class Mesh;
    friend class NodePartitionedMesh;
    friend class MeshRevision;
    friend class MeshLayerMapper;
    friend class ApplicationUtils::NodeWiseMeshPartitioner;

public:
    /// Constructor using a coordinate array
    explicit Node(const double coords[3],
                  std::size_t id = std::numeric_limits<std::size_t>::max());

    /// Constructor using a coordinate array
    explicit Node(std::array<double, 3> const& coords,
                  std::size_t id = std::numeric_limits<std::size_t>::max());

    /// Constructor using single coordinates
    Node(double x, double y, double z, std::size_t id = std::numeric_limits<std::size_t>::max());

    /// Copy constructor
    Node(const Node &node);

    /// Return all the nodes connected to this one
    const std::vector<MeshLib::Node*>& getConnectedNodes() const { return connected_nodes_; }

    /// Get an element the node is part of.
    const Element* getElement(std::size_t idx) const { return elements_[idx]; }

    /// Get all elements the node is part of.
    const std::vector<Element*>& getElements() const { return elements_; }

    /// Get number of elements the node is part of.
    std::size_t getNumberOfElements() const { return elements_.size(); }

    /// Shift the node according to the displacement vector v.
    Node operator-(MathLib::Vector3 const& v) const
    {
        return Node(x_[0]-v[0], x_[1]-v[1], x_[2]-v[2]);
    }

protected:
    /// Update coordinates of a node.
    /// This method automatically also updates the areas/volumes of all connected elements.
    void updateCoordinates(double x, double y, double z);

    /**
     * Add an element the node is part of.
     * This method is called by Mesh::addElement(Element*), see friend definition.
     */
    void addElement(Element* elem) { elements_.push_back(elem); }

    /// clear stored elements connecting to this node
    void clearElements() { elements_.clear(); }

    /// Resets the connected nodes of this node. The connected nodes are
    /// generated by Mesh::setNodesConnectedByElements().
    void setConnectedNodes(std::vector<Node*> &connected_nodes)
    {
        connected_nodes_ = connected_nodes;
    }

    /// Sets the ID of a node to the given value.
    void setID(std::size_t id) { id_ = id; }

    std::vector<Node*> connected_nodes_;
    std::vector<Element*> elements_;
}; /* class */

/// Returns true if the given node is a base node of a (first) element, or if it
/// is not connected to any element i.e. an unconnected node.
bool isBaseNode(Node const& node);

}  // namespace MeshLib
