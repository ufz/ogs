variables:
  GUIX_PETSC_CONTAINER: /data/ogs/apptainer/guix/ogs-petsc_head.squashfs
  XDMF_CONTAINER: /data/ogs/apptainer/ogscm/gcc-default-system-cmake-3491dc36-2457864993c8.sif
  GUIX_COMMIT: 8d70ff3a49f7cdf0eab93b3a1c54ec2f016afc4a

build guix:
  stage: build
  tags: [guix]
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      allow_failure: true
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::guix only.*/
    - when: manual
      allow_failure: true
  script:
    - which guix
    - guix describe
    # SteadyStateDiffusion only!
    - |
      if [[ "$CI_MERGE_REQUEST_LABELS" =~ .*ci::guix\ only.* ]]; then
        guix time-machine -C scripts/guix/channels.scm -- build ogs --with-source=ogs@6.4.4-testing=$PWD
        guix time-machine -C scripts/guix/channels.scm -- build ogs-petsc --with-source=ogs-petsc@6.4.4-testing=$PWD
      else
        guix time-machine -C scripts/guix/channels.scm -- build ogs-ssd --with-source=ogs-ssd@6.4.4-testing=$PWD
        guix time-machine -C scripts/guix/channels.scm -- build ogs-petsc-ssd --with-source=ogs-petsc-ssd@6.4.4-testing=$PWD
      fi

deploy guix container eve:
  stage: build
  tags: [guix]
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      allow_failure: true
  script:
    - which guix
    - guix describe
    # All processes.
    - image=$( guix time-machine -C scripts/guix/channels.scm -- pack --no-substitutes -RR --format=squashfs bash ogs-petsc --with-source=ogs-petsc@6.4.4-testing=$PWD | tee | tail -1 )
    - echo "Image $image"
    - ssh sonjenk@frontend2.eve.ufz.de rm -f ${GUIX_PETSC_CONTAINER}
    - scp $image sonjenk@frontend2.eve.ufz.de:${GUIX_PETSC_CONTAINER}

test guix container eve:
  stage: build
  tags: [frontend2]
  needs: ["deploy guix container eve"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - export work_dir=/work/$USER/builds/$CI_JOB_ID
    - echo "Working directory is ${work_dir}"
    - mkdir -p $work_dir
    - cp -r ${CI_PROJECT_DIR}/Tests/Data/EllipticPETSc $work_dir/
    - export prj_file=${work_dir}/EllipticPETSc/cube_1e3_XDMF_np3.prj
    - jid=$(sbatch --chdir=${work_dir} --job-name=test-guix-container --mem-per-cpu=1G --ntasks=3 --output=/work/%u/%x_%j.out --parsable --time=5 --partition=rocky-9 --wrap="srun apptainer exec ${GUIX_PETSC_CONTAINER} ogs ${prj_file}")
    # - touch /work/$USER/ci_log_$jid.out # required on frontend1, tail -F does not recognize file created
    - while true; do grep "$jid" < <(squeue -hj "$jid") || break; sleep 10; done &> /dev/null & tail -F /work/$USER/test-guix-container_$jid.out --pid="$!" || true
    - exit_code=$(sacct -j $jid.0 --format=ExitCode --noheader | cut -d':' -f1)
    - cd $work_dir
    - apptainer exec ${XDMF_CONTAINER} xdmfdiff -a pressure -b pressure --rel 1e-3 --abs 1e-3 EllipticPETSc/cube_1e3_np3.xdmf cube_1e3_np3_cube_1x1x1_hex_1e3.xdmf
    - apptainer exec ${XDMF_CONTAINER} xdmfdiff -a v -b v --rel 1e-3 --abs 1e-3 EllipticPETSc/cube_1e3_np3.xdmf cube_1e3_np3_cube_1x1x1_hex_1e3.xdmf
    - exit ${exit_code}
