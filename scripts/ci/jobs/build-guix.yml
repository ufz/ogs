variables:
  GUIX_PETSC_CONTAINER: /data/ogs/apptainer/guix/ogs-petsc_head.squashfs
  XDMF_CONTAINER: /data/ogs/apptainer/ogscm/gcc-default-system-cmake-3491dc36-2457864993c8.sif
  GUIX_COMMIT: 8d70ff3a49f7cdf0eab93b3a1c54ec2f016afc4a

build guix:
  stage: build
  tags: [guix]
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      allow_failure: true
    - if: $CI_MERGE_REQUEST_LABELS =~ /.*ci::guix only.*/
    - changes:
        - scripts/guix/channels.scm
    - when: manual
      allow_failure: true
  script:
    - which guix
    - guix describe
    # SteadyStateDiffusion only!
    - |
      if [[ "$CI_MERGE_REQUEST_LABELS" =~ .*ci::guix\ only.* ]]; then
        guix time-machine -C scripts/guix/channels.scm -- build ogs-serial --with-source=ogs-serial=$PWD
        guix time-machine -C scripts/guix/channels.scm -- build ogs-petsc --with-source=ogs-petsc=$PWD
        guix time-machine -C scripts/guix/channels.scm -- build ogs-petsc-mkl --with-source=ogs-petsc-mkl=$PWD --with-commit=eigen=9000b3767770f6dd0f4cfb12f4e19c71921885a4 --without-tests=eigen --with-configure-flag=vtk=-DVTK_MODULE_USE_EXTERNAL_VTK_eigen=OFF --with-source=vtk=https://www.vtk.org/files/release/9.3/VTK-9.3.1.tar.gz
      else
        guix time-machine -C scripts/guix/channels.scm -- build ogs-ssd --with-source=ogs-ssd=$PWD
        guix time-machine -C scripts/guix/channels.scm -- build ogs-petsc-ssd --with-source=ogs-petsc-ssd=$PWD
        guix time-machine -C scripts/guix/channels.scm -- build ogs-petsc-mkl-ssd --with-source=ogs-petsc-mkl-ssd=$PWD --with-commit=eigen=9000b3767770f6dd0f4cfb12f4e19c71921885a4 --without-tests=eigen --with-configure-flag=vtk=-DVTK_MODULE_USE_EXTERNAL_VTK_eigen=OFF --with-source=vtk=https://www.vtk.org/files/release/9.3/VTK-9.3.1.tar.gz
      fi

deploy container:
  stage: build
  tags: [guix]
  needs: []
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      allow_failure: true
    - if: $CI_COMMIT_TAG
  parallel:
    matrix:
      - GUIX_PACKAGE: ["ogs-serial", "ogs-petsc", "ogs-mkl", "ogs-petsc-mkl"]
  script:
    - which guix
    - guix describe
    - |
      if [[ "$GUIX_PACKAGE" =~ .*-mkl ]]; then
        # keep vtk source parameter: default vtk 9.3.0 download misses
        # ThirdParty/eigen/vtkeigen subdirectory. Use explicit download
        # from GitHub-tag.
        GUIX_ARGS="--with-commit=eigen=9000b3767770f6dd0f4cfb12f4e19c71921885a4 --without-tests=eigen --with-configure-flag=vtk=-DVTK_MODULE_USE_EXTERNAL_VTK_eigen=OFF --with-source=vtk=https://www.vtk.org/files/release/9.3/VTK-9.3.1.tar.gz"
      fi
      # Add openmpi package for mpirun
      if [[ "$GUIX_PACKAGE" =~ .*petsc.* ]]; then
        GUIX_ARGS="${GUIX_ARGS} openmpi"
      fi
    # Build phase, retry once if failed
    - guix time-machine -C scripts/guix/channels.scm -- build bash coreutils
    - if [ $? -ne 0 ]; then !!; fi
    - guix time-machine -C scripts/guix/channels.scm -- build ${GUIX_PACKAGE} --with-source=${GUIX_PACKAGE}=$PWD ${GUIX_ARGS}
    - if [ $? -ne 0 ]; then !!; fi
    # Pack phase
    - mcli alias set minio https://minio.ufz.de $MINIO_PUBLIC_ACCESS_KEY $MINIO_PUBLIC_SECRET_KEY
    - image=$( guix time-machine -C scripts/guix/channels.scm -- pack -RR --format=squashfs bash coreutils ${GUIX_PACKAGE} --with-source=${GUIX_PACKAGE}=$PWD ${GUIX_ARGS} | tee | tail -1 )
    - echo "Image (${GUIX_PACKAGE}) $image"
    - mcli cp $image minio/ogs/public/container/ogs/master/${GUIX_PACKAGE}.squashfs
    # Copy petsc image to eve as well
    - |
      if [[ "$GUIX_PACKAGE" == ogs-petsc ]]; then
        ssh sonjenk@frontend2.eve.ufz.de rm -f ${GUIX_PETSC_CONTAINER}
        scp $image sonjenk@frontend2.eve.ufz.de:${GUIX_PETSC_CONTAINER}
      fi

test container eve:
  stage: build
  tags: [frontend2]
  needs: ["deploy container"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - export work_dir=/work/$USER/builds/$CI_JOB_ID
    - echo "Working directory is ${work_dir}"
    - mkdir -p $work_dir
    - cp -r ${CI_PROJECT_DIR}/Tests/Data/EllipticPETSc $work_dir/
    - export prj_file=${work_dir}/EllipticPETSc/cube_1e3_XDMF_np3.prj
    - jid=$(sbatch --chdir=${work_dir} --job-name=test-guix-container --mem-per-cpu=1G --ntasks=3 --output=${work_dir}/log.out --parsable --time=5 --partition=testing --wrap="srun apptainer exec ${GUIX_PETSC_CONTAINER} ogs ${prj_file} -o ${work_dir}")
    # - touch /work/$USER/ci_log_$jid.out # required on frontend1, tail -F does not recognize file created
    - while true; do grep "$jid" < <(squeue -hj "$jid") || break; sleep 10; done &> /dev/null & tail -F /work/$USER/test-guix-container_$jid.out --pid="$!" || true
    - exit_code=$(sacct -j $jid.0 --format=ExitCode --noheader | cut -d':' -f1)
    - cd $work_dir
    - apptainer exec ${XDMF_CONTAINER} xdmfdiff -a pressure -b pressure --rel 1e-3 --abs 1e-3 EllipticPETSc/cube_1e3_np3.xdmf cube_1e3_np3_cube_1x1x1_hex_1e3.xdmf
    - apptainer exec ${XDMF_CONTAINER} xdmfdiff -a v -b v --rel 1e-3 --abs 1e-3 EllipticPETSc/cube_1e3_np3.xdmf cube_1e3_np3_cube_1x1x1_hex_1e3.xdmf
    - exit ${exit_code}
