test linux wheel via notebooks:
  stage: test
  tags: [envinf, shell]
  needs: []
  variables:
    OGS_GROUP: ogs-local
  parallel:
    matrix:
      - OGS_GROUP: ogs-local
        UV_ARGS: ""
      - OGS_GROUP: ogs-master
        UV_ARGS: "--upgrade-package ogs"
      - OGS_GROUP: [ogs-master, ogs-pypi] # maintenance test upgrading all dependencies
        UV_ARGS: "--upgrade"
  rules:
    # don't test master on master
    - if: '$OGS_GROUP == "ogs-master" && $CI_COMMIT_BRANCH == "master"'
      when: never

    # don't test MR against pypi
    - if: '$OGS_GROUP == "ogs-pypi" && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never

    # Maintenance test manual on MR
    - if: '$UV_ARGS == "--upgrade" && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
      allow_failure: true

    # Upgrade jobs may fail
    - if: '$UV_ARGS =~ /.*--upgrade.*/'
      allow_failure: true

    # ogs-local MR only if certain files changed
    - if: '$OGS_GROUP == "ogs-local" && $CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Tests/Data/**/*.py
        - "**/pyproject.toml"
        - "**/*.h"
        - "**/*.cpp"

    # ogs-master MR only if certain files changed
    - if: '$OGS_GROUP == "ogs-master" && $CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Tests/Data/**/*.py
        - Tests/Data/pyproject.toml

    # Run on master
    - if: '$CI_COMMIT_BRANCH == "master"'
  script:
    - cd Tests/Data
    - uv run --group ${OGS_GROUP} ${UV_ARGS} pytest
    # https://github.com/matplotlib/matplotlib/issues/25306:
    - rm -rf "$(uv run python -c 'import matplotlib as mpl; print(mpl.get_cachedir())')"
    # Glacier tutorial
    - |
      cd ../../web/content/docs/tutorials/advancing-glacier
      uv run --project ../../../../../Tests/Data python mesh_basin.py
      uv run --project ../../../../../Tests/Data msh2vtu mesh_basin.msh --reindex
      uv run --project ../../../../../Tests/Data --group ${OGS_GROUP} ${UV_ARGS} ogs OGSinput_basin.prj
      cd -
    # TODO:
    #  - better timeout
    #  - run in parallel
    - |
      find . -type f -iname '*.py' \
          | grep -vP '\.ci-skip|_out|\.venv|PhaseField|mtest|sen_shear|PETSc' \
          | xargs grep -l "jupytext_version" \
          | xargs grep -L "ci skip" \
          | xargs uv run --group ${OGS_GROUP} ${UV_ARGS} python Notebooks/testrunner.py --out _out
  artifacts:
    when: always
    paths:
      - Tests/Data/_out/**/*.html
      - Tests/Data/_out/**/*out.txt
      - web/**/glacier.pdf
