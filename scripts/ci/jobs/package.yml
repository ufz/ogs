create cpm cache:
  stage: package
  tags: [docker]
  needs: [meta, ci_images]
  image: $CONTAINER_GCC_PM_OFF_IMAGE
  rules:
    - if: $CI_COMMIT_TITLE == "[versions] Updated cpm cache info."
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - scripts/cmake/CMakeSetup.cmake
        - scripts/cmake/Dependencies.cmake
        - scripts/ci/jobs/package.yml
        - scripts/cmake/ExternalDependencies.cmake
        - web/data/versions.json
  variables:
    BUILD_DIR: "$CI_PROJECT_DIR/../build/cpm"
  allow_failure:
    exit_codes:
      - 255
  script:
    - _versions_file=$CI_PROJECT_DIR/web/data/versions.json
    - TFEL_RLIV_VERSION=$(jq -r '.minimum_version."tfel-rliv"' ${_versions_file})
    - PETSC_VERSION=$(jq -r '.minimum_version.petsc' ${_versions_file})
    - LIS_VERSION=$(jq -r '.minimum_version.lis' ${_versions_file})
    - HDF5_VERSION=$(jq -r '.tested_version.hdf5' ${_versions_file})
    - VTK_VERSION=$(jq -r '.minimum_version.vtk' ${_versions_file})
    - rm -rf $BUILD_DIR
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    # cpm:
    - cmake ../../ogs -B . -G Ninja --preset release -DCPM_SOURCE_CACHE=./cpm -DCPM_DOWNLOAD_ALL=ON
    - find cpm -type f | grep -i "\.git" | xargs rm -rf
    - VERSION=$(find cpm -type f -print0 | sort -z | xargs -r0  sha1sum | awk '{print $1}' | sha1sum | awk '{print $1}')
    - echo "VERSION=${VERSION}"
    - tar -czf cpm.tar.gz cpm
    - >
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file cpm.tar.gz \
        ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/cpm/${VERSION}/cpm.tar.gz?select=package_file -o cpm_upload.json
    - cat cpm_upload.json
    - _cpm_package_file_id=$(cat cpm_upload.json | jq .id)
    - |
      if [ "$_cpm_package_file_id" != "null" ]; then
        _cpm_package_file_hash=$(cat cpm_upload.json | jq .file_sha256)
        # sponge usage from: https://stackoverflow.com/a/36577521/80480
        jq -r ".cpm.package_file_id = ${_cpm_package_file_id}" ${_versions_file} | sponge ${_versions_file}
        jq -r ".cpm.package_file_sha256 = ${_cpm_package_file_hash}" ${_versions_file} | sponge ${_versions_file}
        cd $CI_PROJECT_DIR
        # Remove merge commit:
        if [ $(git show --no-patch --format="%P" HEAD | wc -w) -eq 2 ]; then git checkout HEAD^2; fi
        git diff
        git config --global user.name "project_120_bot2"
        git config --global user.email "project_120_bot2-no-reply@opengeosys.org"
        git add ${_versions_file}
        git commit -n -m "[versions] Updated cpm cache info."
        git push "https://project_120_bot2:${REPO_WRITE_KEY}@${CI_SERVER_HOST}/${CI_MERGE_REQUEST_SOURCE_PROJECT_PATH}" HEAD:${CI_COMMIT_REF_NAME}
        exit 255 # marks with warning
      fi
    # external dependencies:
    - cd $BUILD_DIR
    - mkdir ext
    - cd ext
    - wget --no-verbose --output-document tfel-rliv-${TFEL_RLIV_VERSION}.zip https://github.com/thelfer/tfel/archive/refs/heads/rliv-${TFEL_RLIV_VERSION}.zip
    - wget --no-verbose --output-document petsc-v${PETSC_VERSION}.zip https://gitlab.com/petsc/petsc/-/archive/v${PETSC_VERSION}/petsc-v${PETSC_VERSION}.zip
    - wget --no-verbose --output-document lis-${LIS_VERSION}.zip https://github.com/anishida/lis/archive/refs/tags/${LIS_VERSION}.zip
    - wget --no-verbose --output-document hdf5-${HDF5_VERSION}.zip https://github.com/HDFGroup/hdf5/archive/refs/tags/hdf5-${HDF5_VERSION//./_}.zip
    - wget --no-verbose --output-document vtk-v${VTK_VERSION}.zip https://github.com/Kitware/VTK/archive/refs/tags/v${VTK_VERSION}.zip
    - cd ..
    - EXT_VERSION=$(find ext -type f -print0 | sort -z | xargs -r0  sha1sum | awk '{print $1}' | sha1sum | awk '{print $1}')
    - echo "EXT_VERSION=${EXT_VERSION}"
    - tar -czf ext.tar.gz ext
    - >
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ext.tar.gz \
        ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/external-dependencies/${EXT_VERSION}/ext.tar.gz

offline configure:
  stage: package
  tags: [docker]
  needs: [meta, ci_images]
  image: $CONTAINER_GCC_PM_OFF_IMAGE
  rules:
    # For testing: remove rules-directive
    - if: '$CI_COMMIT_BRANCH == "master"'
  variables:
    BUILD_DIR: "../build/offline"
  script:
    - CPM_PACKAGE_FILE_ID=$(jq -r '.cpm.package_file_id' web/data/versions.json)
    - EXT_VERSION=$(jq -r '.ext.cache_hash' web/data/versions.json)
    - rm -rf $BUILD_DIR
    - mkdir -p $BUILD_DIR
    - cd $BUILD_DIR
    - curl ${CI_PROJECT_URL}/-/package_files/${CPM_PACKAGE_FILE_ID}/download --output cpm.tar.gz
    - tar xf cpm.tar.gz
    - mv cpm .cpm-${CPM_PACKAGE_FILE_ID}
    - >
      wget --no-verbose --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/external-dependencies/${EXT_VERSION}/ext.tar.gz
    - tar xf ext.tar.gz
    - |
      cmake ../../ogs -B . -G Ninja --preset release \
          -DOGS_DOWNLOAD_CPM_CACHE=ON
      rm CMakeCache.txt
      cmake ../../ogs -B . -G Ninja --preset release-petsc \
        -DOGS_DOWNLOAD_CPM_CACHE=ON \
        -DOGS_USE_MFRONT=ON -DOGS_USE_LIS=ON -DOGS_EXTERNAL_DEPENDENCIES_CACHE=./ext
