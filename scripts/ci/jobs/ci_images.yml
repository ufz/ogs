.ci_images_changes: &ci_images_changes
  changes:
    - ThirdParty/container-maker
    - scripts/ci/jobs/ci_images.yml
    - scripts/docker/saxon/**/*
    - scripts/docker/Dockerfile.pre-commit
    - scripts/docker/Dockerfile.web
    - web/data/versions.json

ci_images:
  stage: preparation
  variables:
    CONTAINER_REGISTRY: ${CI_REGISTRY}/ogs/ogs
    CONTAINER_TAG: latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *ci_images_changes
      variables:
        BUILD_CONTAINER: "true"
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      <<: *ci_images_changes
      variables:
        BUILD_CONTAINER: "true"
        CONTAINER_TAG: ${CI_COMMIT_REF_SLUG}
        CONTAINER_REGISTRY: ${CI_REGISTRY}/${CI_PROJECT_PATH}
    - when: always
  tags: [envinf, shell]
  artifacts:
    reports:
      dotenv: build.env
  script:
    - |
      echo "CONTAINER_GCC_GUI_IMAGE=${CONTAINER_REGISTRY}/gcc-gui:${CONTAINER_TAG}" >> build.env
      echo "CONTAINER_GCC_PM_OFF_IMAGE=${CONTAINER_REGISTRY}/gcc-pm-off:${CONTAINER_TAG}" >> build.env
      echo "CONTAINER_CLANG_IMAGE=${CONTAINER_REGISTRY}/clang:${CONTAINER_TAG}" >> build.env
      echo "XUNIT_TO_JUNIT_IMAGE=${CONTAINER_REGISTRY}/xunit-to-junit:${CONTAINER_TAG}" >> build.env
      echo "PRECOMMIT_IMAGE=${CONTAINER_REGISTRY}/pre-commit:${CONTAINER_TAG}" >> build.env
      echo "WEB_IMAGE=${CONTAINER_REGISTRY}/web:${CONTAINER_TAG}" >> build.env
      cat build.env
      if [ "${BUILD_CONTAINER}" != true ]; then exit 0; fi
    - source build.env
    - !reference [.container-maker-setup, before_script]
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - poetry run ogscm compiler.py ogs.py --build --ogs off
      --cvode --cppcheck --docs --gcovr --gui --ccache
      --version_file ../../web/data/versions.json
      --tag $CONTAINER_GCC_GUI_IMAGE --upload
      --cpu-target $CPU_TARGET
      --packages build-essential
    - poetry run ogscm compiler.py mpi.py ogs.py --build --ogs off
      --pm off --ccache
      --version_file ../../web/data/versions.json
      --tag $CONTAINER_GCC_PM_OFF_IMAGE --upload
      --cpu-target $CPU_TARGET
      --packages build-essential jq moreutils
    - poetry run ogscm compiler.py ogs.py --build --ogs off
      --compiler clang --ccache
      --version_file ../../web/data/versions.json
      --tag $CONTAINER_CLANG_IMAGE --upload
      --cpu-target $CPU_TARGET
    - cd ${CI_PROJECT_DIR}
    - docker build --cache-from $XUNIT_TO_JUNIT_IMAGE -t $XUNIT_TO_JUNIT_IMAGE -f scripts/docker/saxon/Dockerfile scripts/docker/saxon
    - docker push $XUNIT_TO_JUNIT_IMAGE
    - docker build --cache-from $PRECOMMIT_IMAGE -t $PRECOMMIT_IMAGE -f scripts/docker/Dockerfile.pre-commit scripts/docker
    - docker push $PRECOMMIT_IMAGE
    - docker build --cache-from $WEB_IMAGE -t $WEB_IMAGE -f scripts/docker/Dockerfile.web scripts/docker
    - docker push $WEB_IMAGE
