# Source files
set(SOURCES
	AddLayerToMeshDialog.cpp
	ColorTableModel.cpp
	ColorTableView.cpp
	CondFromRasterDialog.cpp
	DataExplorerSettingsDialog.cpp
	DirectConditionGenerator.cpp
	ElementTreeModel.cpp
	ElementTreeView.cpp
	GEOModels.cpp
	GeoOnMeshMappingDialog.cpp
	GeoTabWidget.cpp
	GeoTreeModel.cpp
	GeoTreeView.cpp
	GMSHPrefsDialog.cpp
	LicenseDialog.cpp
	LinearEditDialog.cpp
	LineEditDialog.cpp
	MergeGeometriesDialog.cpp
	MeshAnalysisDialog.cpp
	MeshElementRemovalDialog.cpp
	MeshQualitySelectionDialog.cpp
	MeshValueEditDialog.cpp
	ModellingTabWidget.cpp
	ModelTreeItem.cpp
	MeshLayerEditDialog.cpp
	MshItem.cpp
	MshModel.cpp
	MshTabWidget.cpp
	MshView.cpp
	NetCdfConfigureDialog.cpp
	SaveMeshDialog.cpp
	SelectMeshDialog.cpp
	SetNameDialog.cpp
	SHPImportDialog.cpp
	StationTabWidget.cpp
	StationTreeModel.cpp
	StationTreeView.cpp
	SurfaceExtractionDialog.cpp
)

# Header files
set(HEADERS
	AddLayerToMeshDialog.h
	BaseItem.h
	CondItem.h
	DirectConditionGenerator.h
	CondObjectListItem.h
	GeoObjectListItem.h
	GeoTreeItem.h
	ModelTreeItem.h
	MshItem.h
	ColorTableModel.h
	ColorTableView.h
	CondFromRasterDialog.h
	DataExplorerSettingsDialog.h
	ElementTreeModel.h
	ElementTreeView.h
	GEOModels.h
	GeoOnMeshMappingDialog.h
	GeoTabWidget.h
	GeoTreeModel.h
	GeoTreeView.h
	GMSHPrefsDialog.h
	LicenseDialog.h
	LinearEditDialog.h
	LineEditDialog.h
	MergeGeometriesDialog.h
	MeshAnalysisDialog.h
	MeshElementRemovalDialog.h
	MeshQualitySelectionDialog.h
	MeshValueEditDialog.h
	ModellingTabWidget.h
	MeshLayerEditDialog.h
	MshModel.h
	MshTabWidget.h
	MshView.h
	NetCdfConfigureDialog.h
	SaveMeshDialog.h
	SelectMeshDialog.h
	SetNameDialog.h
	SHPImportDialog.h
	StationTabWidget.h
	StationTreeModel.h
	StationTreeView.h
	SurfaceExtractionDialog.h
)

# Put filter in a folder
source_group("Dialog Header Files" REGULAR_EXPRESSION "[.]*Dialog.h")
source_group("Dialog Source Files" REGULAR_EXPRESSION "[.]*Dialog.cpp")
source_group("Data Model Header Files" REGULAR_EXPRESSION "[.]*Item.h|[.]*Model.h|[.]*View.h")
source_group("Data Model Source Files" REGULAR_EXPRESSION "[.]*Item.cpp|[.]*Model.cpp|[.]*View.cpp")


# Include the headers which are generated by uic and moc
# and include additional header
set(SOURCE_DIR_REL ${CMAKE_CURRENT_SOURCE_DIR}/../../..)
set(GUI_SOURCE_DIR_REL ${CMAKE_CURRENT_SOURCE_DIR}/..)
include_directories(
	${CMAKE_CURRENT_BINARY_DIR}
	${CMAKE_CURRENT_BINARY_DIR}/../Base
	${CMAKE_CURRENT_BINARY_DIR}/DiagramView
	${CMAKE_CURRENT_BINARY_DIR}/StratView
	${SOURCE_DIR_REL}/BaseLib
	${SOURCE_DIR_REL}/MathLib
	${SOURCE_DIR_REL}/GeoLib
	${SOURCE_DIR_REL}/MeshGeoToolsLib
	${SOURCE_DIR_REL}/MeshLib
	${SOURCE_DIR_REL}/FileIO
	${CMAKE_CURRENT_SOURCE_DIR}/DiagramView
	${CMAKE_CURRENT_SOURCE_DIR}/StratView
	${GUI_SOURCE_DIR_REL}/Base
	${GUI_SOURCE_DIR_REL}/VtkVis
)

if(VTKOSGCONVERTER_FOUND)
	include_directories(${VTKOSGCONVERTER_INCLUDE_DIRS})
endif()

if(GEOTIFF_FOUND)
	include_directories(${GEOTIFF_INCLUDE_DIRS})
endif() # GEOTIFF_FOUND

# Put moc files in a project folder
source_group("UI Files" REGULAR_EXPRESSION "\\w*\\.ui")
source_group("Moc Files" REGULAR_EXPRESSION "moc_.*")


# Create the library
add_library(QtDataView STATIC
	${SOURCES}
	${HEADERS}
)

# Link Qt library
target_link_libraries(QtDataView PUBLIC Qt5::Core Qt5::Gui)
target_link_libraries(QtDataView INTERFACE
	FileIO
	QtBase
)
add_dependencies(QtDataView QtDiagramView QtStratView)

ADD_VTK_DEPENDENCY(QtDataView)

if(GEOTIFF_FOUND)
	target_link_libraries( QtDataView INTERFACE ${GEOTIFF_LIBRARIES} )
endif () # GEOTIFF_FOUND

set_property(TARGET QtDataView PROPERTY FOLDER "DataExplorer")
