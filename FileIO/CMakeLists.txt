# Source files
# GET_SOURCE_FILES(SOURCES_FILEIO)
SET( SOURCES
	AsciiRasterInterface.h
	AsciiRasterInterface.cpp
	GMSInterface.h
	GMSInterface.cpp
	GMSHInterface.h
	GMSHInterface.cpp
	PetrelInterface.h
	PetrelInterface.cpp
	readMeshFromFile.h
	readMeshFromFile.cpp
	SHPInterface.h
	SHPInterface.cpp
	TetGenInterface.h
	TetGenInterface.cpp
	TINInterface.h
	TINInterface.cpp
	Writer.h
	Writer.cpp
)

GET_SOURCE_FILES(SOURCES_LEGACY Legacy)
GET_SOURCE_FILES(SOURCES_GMSHIO GmshIO)
GET_SOURCE_FILES(SOURCES_RAPID_XML RapidXmlIO)
GET_SOURCE_FILES(SOURCES_VTK VtkIO)
SET ( SOURCES ${SOURCES} ${SOURCES_LEGACY} ${SOURCES_GMSHIO} ${SOURCES_RAPID_XML} ${SOURCES_VTK})

GET_SOURCE_FILES(SOURCES_BASE_XML XmlIO)
SET (SOURCES ${SOURCES} ${SOURCES_BASE_XML})
GET_SOURCE_FILES(SOURCES_BOOST_XML XmlIO/Boost)
SET (SOURCES ${SOURCES} ${SOURCES_BOOST_XML})
IF (QT4_FOUND)
	SET ( SOURCES ${SOURCES} FEFLOWInterface.h FEFLOWInterface.cpp)
	GET_SOURCE_FILES(SOURCES_QT_XML XmlIO/Qt)
	SET ( SOURCES ${SOURCES} ${SOURCES_QT_XML})
ENDIF (QT4_FOUND)

# It could be used for other MPI based DDC approach in future.
IF(OGS_USE_PETSC)
	GET_SOURCE_FILES(SOURCES_MPI_MESHIO MPI_MeshIO)
	SET (SOURCES ${SOURCES} ${SOURCES_MPI_MESHIO})
ENDIF()

# Create the library
ADD_LIBRARY(FileIO STATIC ${SOURCES})

INCLUDE_DIRECTORIES(
	.
	${CMAKE_CURRENT_SOURCE_DIR}/../BaseLib
	${CMAKE_CURRENT_SOURCE_DIR}/../GeoLib
	${CMAKE_CURRENT_SOURCE_DIR}/../MathLib
	${CMAKE_CURRENT_SOURCE_DIR}/../MeshLib
	${CMAKE_CURRENT_BINARY_DIR}/../BaseLib
)

TARGET_LINK_LIBRARIES (FileIO
	GeoLib
	MeshLib
	zlib
	shp
)

ADD_CATALYST_DEPENDENCY(FileIO)

FILE(GLOB XSD_FILES . *.xsd)
IF(APPLE)
	INSTALL(FILES ${XSD_FILES} DESTINATION ${CMAKE_BINARY_DIR}/_CPack_Packages/OSX/DragNDrop/${CPACK_PACKAGE_FILE_NAME}/DataExplorer.app/Contents/MacOS)
ELSE()
	INSTALL(FILES ${XSD_FILES} DESTINATION bin)
ENDIF()
